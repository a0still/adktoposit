from flask import Flask, render_template, request, jsonify
import os
import logging
from google.cloud import aiplatform
from vertexai.language_models import ChatModel, InputOutputTextPair
from google.oauth2 import service_account
import pandas as pd

from utils.config import load_config, get_vertex_config
from utils.visualization import create_visualization
from utils.errors import AppError, handle_error, VertexAIError

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Load configuration
try:
    config = load_config('config/agent_config.yaml')
    vertex_config = get_vertex_config()
    
    # Set up credentials
    credentials = service_account.Credentials.from_service_account_file(
        'key.json',
        scopes=['https://www.googleapis.com/auth/cloud-platform']
    )
    
    # Initialize Vertex AI
    logger.info(f"Initializing Vertex AI with config: {vertex_config}")
    aiplatform.init(
        project=vertex_config['project_id'],
        location=vertex_config['location'],
        credentials=credentials
    )
except Exception as e:
    logger.error(f"Failed to initialize application: {str(e)}")
    raise
    scopes=['https://www.googleapis.com/auth/cloud-platform']
)

try:
    logger.info(f"Initializing Vertex AI with project_id: {project_id} and location: {location}")
    # Initialize with service account credentials
    aiplatform.init(
        project=project_id,
        location=location,
        credentials=credentials
    )
    logger.info("Vertex AI initialization successful")
except Exception as e:
    logger.error(f"Failed to initialize Vertex AI: {str(e)}")
    raise

# Initialize a global chat model
chat_model = None

def init_chat_model():
    """Initialize the chat model with Vertex AI"""
    global chat_model
    if chat_model is None:
        try:
            model = ChatModel.from_pretrained("chat-bison@002")
            chat_model = model.start_chat(
                context="""You are a helpful AI assistant specialized in data analysis and visualization. 
                You can help users understand their data and create visualizations. You are clear and 
                concise in your responses.""",
                examples=[
                    InputOutputTextPair(
                        input_text="Can you help me analyze some data?",
                        output_text="I'd be happy to help you analyze your data. What kind of data would you like to work with?"
                    ),
                    InputOutputTextPair(
                        input_text="Show me a visualization",
                        output_text="I can help create visualizations. What type of data would you like to visualize, and what kind of chart would you prefer (e.g., bar, line, scatter plot)?"
                    )
                ]
            )
            return True
        except Exception as e:
            print(f"Error initializing chat model: {str(e)}")
            return False
    return True

@app.route('/')
def home():
    """Render the main application page"""
    return render_template('index.html')

@app.route('/test-chat', methods=['GET'])
def test_chat():
    """Test endpoint to verify ADK chat functionality"""
    try:
        logger.info("Testing chat functionality...")
        if init_chat_model():
            logger.info("Chat model initialized successfully, sending test message")
            test_response = chat_model.send_message(
                "Hello! Can you confirm that you're working properly?"
            )
            logger.info("Test message sent successfully")
            return jsonify({
                'status': 'success',
                'response': test_response.text,
                'project_id': project_id,
                'location': location
            })
        else:
            logger.error("Failed to initialize chat model")
            return jsonify({
                'status': 'error',
                'message': 'Failed to initialize chat model',
                'project_id': project_id,
                'location': location
            }), 500
    except Exception as e:
        logger.error(f"Error in test-chat endpoint: {str(e)}")
        import traceback
        return jsonify({
            'status': 'error',
            'message': str(e),
            'traceback': traceback.format_exc(),
            'project_id': project_id,
            'location': location
        }), 500

@app.route('/chat', methods=['POST'])
def chat():
    """Handle chat interactions with the ADK model"""
    try:
        if not init_chat_model():
            return jsonify({
                'status': 'error',
                'message': 'Chat model not initialized'
            }), 500

        data = request.json
        user_input = data.get('message', '')
        
        if not user_input:
            return jsonify({
                'status': 'error',
                'message': 'No message provided'
            }), 400

        response = chat_model.send_message(user_input)
        return jsonify({
            'status': 'success',
            'response': response.text
        })

    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port, debug=True)